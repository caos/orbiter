//go:generate goderive .

package hostname

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os/exec"
	"strings"

	"github.com/caos/orbos/internal/operator/common"
	"github.com/caos/orbos/internal/operator/nodeagent"
	"github.com/caos/orbos/internal/operator/nodeagent/dep/middleware"
)

type Installer interface {
	isHostname()
	nodeagent.Installer
}

type hostnameDep struct{}

func New() Installer {
	return &hostnameDep{}
}

func (hostnameDep) isHostname() {}

func (hostnameDep) Is(other nodeagent.Installer) bool {
	_, ok := middleware.Unwrap(other).(Installer)
	return ok
}

func (hostnameDep) String() string { return "Hostname" }

func (*hostnameDep) Equals(other nodeagent.Installer) bool {
	_, ok := other.(*hostnameDep)
	return ok
}

func (s *hostnameDep) Current() (pkg common.Package, err error) {

	buf := new(bytes.Buffer)
	defer buf.Reset()

	cmd := exec.Command("hostname")
	cmd.Stdout = buf
	if err := cmd.Run(); err != nil {
		return pkg, err
	}

	pkg.Config = map[string]string{"hostname": strings.TrimSuffix(buf.String(), "\n")}
	return pkg, nil
}

func (s *hostnameDep) Ensure(remove common.Package, ensure common.Package, _ bool) error {

	oldHostname := remove.Config["hostname"]
	newHostname := ensure.Config["hostname"]
	if oldHostname == newHostname {
		return nil
	}

	buf := new(bytes.Buffer)
	defer buf.Reset()

	cmd := exec.Command("hostnamectl", "set-hostname", newHostname)
	cmd.Stdout = buf
	if err := cmd.Run(); err != nil {
		return err
	}

	filePath := "/etc/hosts"

	file, err := ioutil.ReadFile(filePath)
	if err != nil {
		return err
	}

	hosts := string(file)

	commentLine := "# The following line is generated by the caos AG developed node agent"
	newLines := deriveFilter(func(line string) bool {
		return line != commentLine && !strings.Contains(line, oldHostname) && !strings.Contains(line, newHostname)
	}, strings.Split(hosts, "\n"))

	newHosts := strings.Join(append([]string{commentLine, fmt.Sprintf("127.0.0.1\t%s", newHostname)}, newLines...), "\n")

	if hosts != newHosts {
		return ioutil.WriteFile(filePath, []byte(newHosts), 644)
	}
	return nil
}
