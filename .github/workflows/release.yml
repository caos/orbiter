name: Release
on:
  push:
    branches:
      - master
jobs:
  release:
    name: Release Orbos
    runs-on: ubuntu-18.04
    steps:
      - name: Source Checkout
        id: source-checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Release
        id: release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GO111MODULE: on
          CGO_ENABLED: 0
          CR_PAT: ${{ secrets.CR_PAT }}
          REGISTRY: ghcr.io
        run: |
          npm install semantic-release@v17.0.4
          export BRANCH=${GITHUB_REF##*/}
          export VERSION=$BRANCH
          VERSION="v$(npx semantic-release --dry-run --plugins=@semantic-release/commit-analyzer --analize-commits | grep "The next release version is" | sed -ne 's/.*The\ next\ release\ version\ is\ \([0-9]\+\.[0-9]\+\.[0-9]\+\)$/\1/p')"
          [[ "$VERSION" == "v" ]] && echo "Exiting, as no new version needs to be released" && exit 0

          export IMAGE=$REGISTRY/$GITHUB_REPOSITORY
          export TAG_LATEST=${IMAGE}:latest
          export TAG_VERSION=${IMAGE}:${VERSION}
          export CRBACKUPIMAGE=$REGISTRY/caos/crbackup
          export CRBACKUP_TAG_LATEST=${IMAGE}:latest
          export CRBACKUP_TAG_VERSION=${CRBACKUPIMAGE}:${VERSION}

          go mod download
          mkdir -p ./artifacts
          go run cmd/gen-executables/*.go -version "$VERSION" -commit "${{ github.sha }}" -githubclientid "${{ secrets.GITHUBOAUTHCLIENTID }}" -githubclientsecret "${{ secrets.GITHUBOAUTHCLIENTSECRET }}" --orbctl ./artifacts

          CGO_ENABLED=0 GOOS=linux go build -o ./artifacts/gen-charts  cmd/gen-charts/*.go

          echo "Publishing ORBOS version $VERSION"
          docker login $REGISTRY -u $GITHUB_ACTOR -p $CR_PAT
          docker build --tag ${TAG_LATEST} --tag ${TAG_VERSION} --file ./build/orbos/Dockerfile .

          docker push ${TAG_VERSION}
          docker push ${TAG_LATEST}

          docker build --tag ${CRBACKUP_TAG_VERSION} --tag ${CRBACKUP_TAG_LATEST} --file ./build/cr-backup/Dockerfile .
          docker push ${CRBACKUP_TAG_VERSION}
          docker push ${CRBACKUP_TAG_LATEST}

          npx semantic-release && exit 0
